## PowerShell Script to conveniently open in a browser the
## HTML documentation which was generated by Doxygen.
##
## @file        open-doxygen-html-docs.ps1
## @author      Lester J. Dowling
## @date        Started 2019-04-21
Param
(
	[parameter(mandatory = $false)]
    [Switch]
    [alias("q")]
    $QUIET
)
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing
Add-Type @'
using System;
using System.Runtime.InteropServices;
public class WindowControl {
    [DllImport("user32.dll")]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool SetForegroundWindow(IntPtr hWnd);
}
'@;

#
# Audio Player
#
New-Variable -Name AUDIO -Scope Script -Force
if (-Not($QUIET)) {
    $AUDIO = New-Object System.Media.SoundPlayer
}

#
# Sounds Directory
#
New-Variable -Name SOUNDS_DIR  -Scope Script -Force
[string] $SOUNDS_DIR = Resolve-Path "${ENV:USERPROFILE}/sounds" -ea:ignore    |    Select -ExpandProperty Path


Function fatal_error_exit($ERROR_MESSAGE) {   # Fatal error; cannot continue.
    if (-Not($QUIET)) {
        $ERROR_SOUND = Resolve-Path "${SOUNDS_DIR}/Computer-Data-Error-Sound.wav" -ea:ignore    |    Select -ExpandProperty Path
        if (Test-Path $ERROR_SOUND) {
            $AUDIO.SoundLocation = "$ERROR_SOUND"
	        $AUDIO.Play()
        }
    }
    Write-Output "!!! [ERROR] $ERROR_MESSAGE"
    Write-VolumeCache C
    exit 1
}

#
# MAIN
#
$CMAKE_BINARY_DIR_FILE = Resolve-Path "${PSScriptRoot}/cmake_binary_dir.txt" -ea:Ignore
if (-Not($CMAKE_BINARY_DIR_FILE)) {
    fatal_error_exit "Build the project before viewing the docs.  Missing: $CMAKE_BINARY_DIR_FILE"
}
$BINARY_DIR = Get-Content $CMAKE_BINARY_DIR_FILE
$BINARY_DIR = Resolve-Path "${BINARY_DIR}" -ErrorAction:Ignore
if (-Not($BINARY_DIR)) {
	fatal_error_exit "No such CMake binary directory: $BINARY_DIR"
}
$INDEX_HTML = Resolve-Path "${BINARY_DIR}/html/index.html" -ErrorAction:Ignore

if (-Not($INDEX_HTML)) {
	fatal_error_exit "No such HTML file: $INDEX_HTML"
}

$FIREFOX = Get-Command firefox -ErrorAction:Ignore
if (-Not($FIREFOX)) {
	fatal_error_exit "No Firefox web browser"
}

&$FIREFOX "$INDEX_HTML"
# Wait for Firefox to launch:
foreach ($TRY_COUNTER in 1..12) {
    Start-Sleep -Seconds 2
    [int] $FirefoxWindow = (Get-Process).Where{ $_.MainWindowTitle -match 'Mozilla Firefox$' }  |  Select-Object -ExpandProperty MainWindowHandle
    if ($FirefoxWindow -ne 0) {
        break;
    }
}
if ($FirefoxWindow -eq 0) {
    fatal_error_exit "Invalid window handle for Firefox."
}
[WindowControl]::SetForegroundWindow($FirefoxWindow)
